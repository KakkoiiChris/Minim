; Tic Tac Toe         \
  Christian Alexander \
  08/06/2021

; Print banner
[12 :] = "###############\n# TIC-TAC-TOE #\n###############\n\n".
_+ 'P'.

; New game
_> '('.
    ; Init board and first player
    [@ 10] = "123456789X".
    
    ; Game loop
    _> '['.
        ; Print board and prompt
        [12 :] = " % | % | %\n---+---+---\n % | % | %\n---+---+---\n % | % | %\n\n% > " % [@ 10].
        _+ 'P'.
        
        ; Input validation - range
        _> 2.
            #> [10].
            
            --[10].
            
            _^ [10] < 0 || [10] > 8.
                _< 3.
            
            [12 :] = "\nChoose a number between 1 and 9!\n\n% > " % [9].
            _+ 'P'.
            
            _< 2.
        ; Input validation - valid square
        _> 3.
            _^ [[10]] == 'X' || [[10]] == 'O'.
                _< 4.
            
            [12 :] = "\nSquare % is occupied!\n\n% > " % {[10] + '1', [9]}.
            _+ 'P'.
            
            _< 2.
        _> 4.
        
        $< '\n'.
        
        ; Set mark on board
        [[10]] = [9].
        
        [11] = 0.
        
        _> 6.
            ; Check rows
            _< 'R' + ([[11] + 0 * 3] == [[11] + 1 * 3] && [[11] + 1 * 3] == [[11] + 2 * 3]) * 32.
            _>'r'.
                [9] = [[11] + 0 * 3].
                _< ']'.
            _>'R'.
            
            ; Check columns
            _< 'C' + ([0 + [11] * 3] == [1 + [11] * 3] && [1 + [11] * 3] == [2 + [11] * 3]) * 32.
            _>'c'.
                [9] = [0 + [11] * 3].
                _< ']'.
            _>'C'.
            
            _< 5 + (++[11] < 3).
        _> 5.
        
        ; Check forward diagonal
        _< 'F' + ([0 + 0 * 3] == [1 + 1 * 3] && [1 + 1 * 3] == [2 + 2 * 3]) * 32.
        _>'f'.
            [9] = [0 + 0 * 3].
            _< ']'.
        _>'F'.
        
        ; Check backward diagonal
        _< 'B' + ([0 + 2 * 3] == [1 + 1 * 3] && [1 + 1 * 3] == [2 + 0 * 3]) * 32.
        _>'b'.
            [9] = [0 + 2 * 3].
            _< ']'.
        _>'B'.
        
        ; Toggle turn
        [9] = [9] == 'X' ? 'O' : 'X'.
        
        _< '['.
    _> ']'.
    
    ; Print final board, win message, and new game prompt
    [12 :] = " % | % | %\n---+---+---\n % | % | %\n---+---+---\n % | % | %\n\nPlayer % wins!\n\nPlay again?\n\n(Y/N) > " % [@ 10].
    _+ 'P'.
    
    ; Input validation - correct character
    _> 7.
        $> [10].
        $!.
        
        _^ [10] <> 'Y' && [10] <> 'y' && [10] <> 'N' && [10] <> 'n'.
            _< 8.
        
        [12 :] = "\n(Y/N) > ".
        _+ 'P'.
        
        _< 7.
    _> 8.
    
    $< '\n'.
    
    _< ([10] == 'Y' || [10] == 'y') ? '(' : ')'.
_> ')'.

; Print goodbye
[12 :] = "Thanks for playing!\n".
_+ 'P'.

; Gosub guard
_< '.'.
    ; Print string
    _> 'P'.
        [11] = 12.
        _> 1.
            $< [[11]].
            _< ?[++[11]].
        _> 0.
    _-.
_> '.'.