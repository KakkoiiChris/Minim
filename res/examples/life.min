; Conway's Game of Life \
  Christian Alexander   \
  08/13/2021

; Memory Space Allocation            \
  CONSTANTS                          \
  0      - Board size                \
  1      - Board allocation          \
  2 -> 3 - Print characters          \
  VARIABLES                          \
  4 - Board pointer                  \
  5 - General index, neighbor count  \
  6 - Board row, board character     \
  7 - Board col, wait character      \
  8 - Offset row                     \
  9 - Offset col                     \
  10 - Actual row                    \
  11 - Actual col                    \
  ARRAYS                             \
  12 -> 12 + [1]           - Board A \
  12 + [1] -> 12 + 2 * [1] - Board B

; Initialize constants
[0] = 40.
[1] = [0] * [0].
[2 :] = " â–ˆ".

; Initialize Board A with randomly alive cells
_> 'I'.
    [12 + [5]++] = R < 0.5.
    _< 'I' + ([5] == [1]) * 32.
_> 'i'.

; Game loop
_> 'L'.
    [5] = 0.
    
    ; Print board
    _> 'B'.
        [6] = [2 + ?[12 + ([4] * [1]) + [5]++]].
        $< [6].
        $< [6].
        _^ [5] % [0].
            $< '\n'.
        _< 'B' + ([5] == [1]) * 32.
    _> 'b'.
    $< '\n'.
    
    ; Get next generation
    [6] = 0.
    _> 'r'.
        [7] = 0.
        _> 'c'.
            [5] = 0.
        
            [8] = -1.
            _> 'y'.
                [9] = -1.
                _> 'x'.
                    _^ !([8] == [9] && [9] == 0).
                        _< '!'.
                
                    [10] = [7] + [9].
                    
                    _^ [10] >= 0 && [10] < [0].
                        _< '!'.
                    
                    [11] = [6] + [8].
                    
                    _^ [11] >= 0 && [11] < [0].
                        _< '!'.
                    
                    [5] += [12 + ([4] * [1]) + ([10] + [11] * [0])].
                    
                    _> '!'.
                    
                    _< 'X' + (++[9] <= 1) * 32.
                _> 'X'.
                
                _< 'Y' + (++[8] <= 1) * 32.
            _>'Y'.
            
            [10] = 12 + ([4] * [1]) + ([7] + [6] * [0]).
            [11] = 12 + (![4] * [1]) + ([7] + [6] * [0]).
            
            [[11]] = [[10]].
            
            _^ !([[10]] && ([5] < 2 || [5] > 3)).
                [[11]] = F.
            
            _^ !(![[10]] && [5] == 3).
                [[11]] = T.
            
            _< 'C' + ?(++[7] % [0]) * 32.
        _> 'C'.
        
        [7] = 0.
        
        _< 'R' + ?(++[6] % [0]) * 32.
    _> 'R'.
    
    ; Toggle current board
    !![4].
    
    ; Wait until enter is pressed
    $> [7].
    $!.
    
    ; Break loop if non-empty  input provided
    _^ [7].
_< 'L'.